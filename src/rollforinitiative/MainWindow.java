/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/* 
Author: Robert Thayer
Author email: rthayer@alum.ups.edu
Author twitter: @Kitsucoon
*/

package rollforinitiative;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;
import javax.swing.*;
import java.io.*;
import javax.swing.filechooser.*;

/**
 *
 * @author rthayeriii
 */
public class MainWindow extends JFrame {
  
    // Main method
    public static void main(String[] args)
    {
        SwingUtilities.invokeLater(new Runnable(){

            @Override
            public void run() {
                MainWindow window = new MainWindow();
                window.setVisible(true);
            }
        });
        // Utilize Nimbus look and feel
        try 
        {
            UIManager.setLookAndFeel( "com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel");
        }
        catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) 
        {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
    }
    
    // Variable setters/getters
    public void setInitLabel(String x)
    {
        initLabel.setText(x);
    }
    
    public void setInitPassLabel(String x)
    {
        initPassLabel.setText(x);
    }
    
    public void setCurrentPlayerLabel(String x)
    {
        currentPlayerLabel.setText(x);
    }
    
    // Takes a JList and an object array. Sets the JList to the objects in the array
    public void setInitList(JList list, Object[] x)
    {
        list.setListData(x);
    }
    
    // Obtains the player that the user selected in the JList and returns that player
    private Player getPlayerFromList()
    {
        int x;
        Player p1 = null;
        do
        {
            x = initList.getSelectedIndex();
            if (x == -1)
                javax.swing.JOptionPane.showMessageDialog(null, 
                   "Please select a player", "Input error", javax.swing.JOptionPane.ERROR_MESSAGE);
            else
                p1 = getPlayer(x);
        } while (p1 == null);
        return p1;
    }

    /**
     *
     * @param x
     */

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nextButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        initList = new javax.swing.JList();
        initPassLabel = new javax.swing.JLabel();
        currentPlayerLabel = new javax.swing.JLabel();
        initLabel = new javax.swing.JLabel();
        newPCButton = new javax.swing.JButton();
        addOrRemoveButton = new javax.swing.JButton();
        newPlayerPanel = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        baseInitLabel = new javax.swing.JLabel();
        totalInitLabel = new javax.swing.JLabel();
        baseInitSpin = new javax.swing.JSpinner();
        totalInitSpin = new javax.swing.JSpinner();
        nameField = new javax.swing.JTextField();
        npcLabel = new javax.swing.JLabel();
        npcCheck = new javax.swing.JCheckBox();
        plusLabel = new javax.swing.JLabel();
        numOfDiceSpin = new javax.swing.JSpinner();
        d6Label = new javax.swing.JLabel();
        addCombatantButton = new javax.swing.JButton();
        seizeLabel = new javax.swing.JLabel();
        seizeCheck = new javax.swing.JCheckBox();
        addDiceButton = new javax.swing.JButton();
        changePanel = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        changeLabel = new javax.swing.JLabel();
        scoreSpin = new javax.swing.JSpinner();
        changeDiceLabel = new javax.swing.JLabel();
        diceSpin = new javax.swing.JSpinner();
        addDiceBut = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        healButton = new javax.swing.JButton();
        woundButton = new javax.swing.JButton();
        fullDefenseButton = new javax.swing.JButton();
        dodgeButton = new javax.swing.JButton();
        interceptButton = new javax.swing.JButton();
        matrixPanel = new javax.swing.JPanel();
        checkOWButton = new javax.swing.JButton();
        increaseOWButton = new javax.swing.JButton();
        rebootButton = new javax.swing.JButton();
        matrixTimerButton = new javax.swing.JButton();
        overwatchSpin = new javax.swing.JSpinner();
        owLabel = new javax.swing.JLabel();
        tieButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem3 = new javax.swing.JMenuItem();
        aboutMenu = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Roll For Initiative");
        setBackground(new java.awt.Color(255, 255, 255));
        setIconImages(null);
        setMaximumSize(new java.awt.Dimension(720, 400));
        setMinimumSize(new java.awt.Dimension(720, 400));
        setResizable(false);

        nextButton.setText("Next");
        nextButton.setEnabled(false);
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        initList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        initList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                initListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(initList);

        initPassLabel.setText("Initiative Pass: 1");

        currentPlayerLabel.setFont(new java.awt.Font("Microsoft YaHei", 1, 18)); // NOI18N
        currentPlayerLabel.setText(" ");
        currentPlayerLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        initLabel.setText("Initiative: ");

        newPCButton.setText("New Combatant");
        newPCButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPCButtonActionPerformed(evt);
            }
        });

        addOrRemoveButton.setText("Change Score");
        addOrRemoveButton.setEnabled(false);
        addOrRemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOrRemoveButtonActionPerformed(evt);
            }
        });

        newPlayerPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("New Combatant"));

        nameLabel.setText("Name:");

        baseInitLabel.setText("Base Initiative:");

        totalInitLabel.setText("Total Initiative:");

        baseInitSpin.setModel(new javax.swing.SpinnerNumberModel(1, 0, 50, 1));
        baseInitSpin.setEnabled(false);

        totalInitSpin.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(0), null, Integer.valueOf(1)));

        npcLabel.setText("Roll dice automatically:");

        npcCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                npcCheckActionPerformed(evt);
            }
        });

        plusLabel.setText("+");

        numOfDiceSpin.setModel(new javax.swing.SpinnerNumberModel(1, 0, 5, 1));
        numOfDiceSpin.setEnabled(false);

        d6Label.setText("d6");

        addCombatantButton.setText("Add Combatant");
        addCombatantButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCombatantButtonActionPerformed(evt);
            }
        });

        seizeLabel.setText("Seize the Initiative:");

        javax.swing.GroupLayout newPlayerPanelLayout = new javax.swing.GroupLayout(newPlayerPanel);
        newPlayerPanel.setLayout(newPlayerPanelLayout);
        newPlayerPanelLayout.setHorizontalGroup(
            newPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newPlayerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(newPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(newPlayerPanelLayout.createSequentialGroup()
                        .addGroup(newPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(newPlayerPanelLayout.createSequentialGroup()
                                .addComponent(nameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nameField))
                            .addGroup(newPlayerPanelLayout.createSequentialGroup()
                                .addComponent(totalInitLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(totalInitSpin, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addCombatantButton, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(npcLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(npcCheck))
                    .addGroup(newPlayerPanelLayout.createSequentialGroup()
                        .addComponent(baseInitLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(baseInitSpin, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(plusLabel)
                        .addGap(12, 12, 12)
                        .addComponent(numOfDiceSpin, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(d6Label)
                        .addGap(18, 18, 18)
                        .addComponent(seizeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(seizeCheck)
                        .addGap(0, 113, Short.MAX_VALUE))))
        );
        newPlayerPanelLayout.setVerticalGroup(
            newPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newPlayerPanelLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(newPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(npcCheck)
                    .addGroup(newPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(npcLabel)
                        .addComponent(nameLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(newPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(newPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(baseInitSpin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(plusLabel)
                        .addComponent(numOfDiceSpin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(d6Label)
                        .addComponent(seizeLabel)
                        .addComponent(seizeCheck))
                    .addComponent(baseInitLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(newPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalInitLabel)
                    .addComponent(totalInitSpin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addCombatantButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        addDiceButton.setText("Change +d6");
        addDiceButton.setEnabled(false);
        addDiceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDiceButtonActionPerformed(evt);
            }
        });

        changePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Change Score / Dice"));

        addButton.setText("Change");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        changeLabel.setText("Enter amount to change:");

        scoreSpin.setModel(new javax.swing.SpinnerNumberModel());

        changeDiceLabel.setText("Enter amount to change:");

        diceSpin.setModel(new javax.swing.SpinnerNumberModel());

        addDiceBut.setText("Change");
        addDiceBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDiceButActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout changePanelLayout = new javax.swing.GroupLayout(changePanel);
        changePanel.setLayout(changePanelLayout);
        changePanelLayout.setHorizontalGroup(
            changePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, changePanelLayout.createSequentialGroup()
                .addGroup(changePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(changeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                    .addComponent(changeDiceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(changePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(changePanelLayout.createSequentialGroup()
                        .addComponent(diceSpin, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addDiceBut))
                    .addGroup(changePanelLayout.createSequentialGroup()
                        .addComponent(scoreSpin, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addButton))))
        );
        changePanelLayout.setVerticalGroup(
            changePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(changePanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(changePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(changeLabel)
                    .addComponent(scoreSpin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(changePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(changeDiceLabel)
                    .addComponent(diceSpin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addDiceBut)))
        );

        changePanel.setVisible(false);

        removeButton.setText("Remove");
        removeButton.setEnabled(false);
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Modifiers"));

        healButton.setText("Heal (+1)");
        healButton.setEnabled(false);
        healButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                healButtonActionPerformed(evt);
            }
        });

        woundButton.setText("Wound (-1)");
        woundButton.setEnabled(false);
        woundButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                woundButtonActionPerformed(evt);
            }
        });

        fullDefenseButton.setText("Full Defense");
        fullDefenseButton.setEnabled(false);
        fullDefenseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullDefenseButtonActionPerformed(evt);
            }
        });

        dodgeButton.setText("Dodge/Parry/Block/Hit the Dirt");
        dodgeButton.setEnabled(false);
        dodgeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dodgeButtonActionPerformed(evt);
            }
        });

        interceptButton.setText("Intercept");
        interceptButton.setEnabled(false);
        interceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                interceptButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dodgeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(interceptButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(healButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(woundButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(fullDefenseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(healButton)
                    .addComponent(woundButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(interceptButton)
                    .addComponent(fullDefenseButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dodgeButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        matrixPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Matrix"));

        checkOWButton.setText("Check OW");
        checkOWButton.setEnabled(false);
        checkOWButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkOWButtonActionPerformed(evt);
            }
        });

        increaseOWButton.setText("Increase OW");
        increaseOWButton.setEnabled(false);
        increaseOWButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                increaseOWButtonActionPerformed(evt);
            }
        });

        rebootButton.setText("Reboot");
        rebootButton.setEnabled(false);
        rebootButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rebootButtonActionPerformed(evt);
            }
        });

        matrixTimerButton.setText("15m Increase");
        matrixTimerButton.setEnabled(false);
        matrixTimerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matrixTimerButtonActionPerformed(evt);
            }
        });

        overwatchSpin.setEnabled(false);

        javax.swing.GroupLayout matrixPanelLayout = new javax.swing.GroupLayout(matrixPanel);
        matrixPanel.setLayout(matrixPanelLayout);
        matrixPanelLayout.setHorizontalGroup(
            matrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(matrixPanelLayout.createSequentialGroup()
                .addGroup(matrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(checkOWButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rebootButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(increaseOWButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(matrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(matrixPanelLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(matrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(matrixTimerButton)
                            .addComponent(overwatchSpin, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(owLabel))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        matrixPanelLayout.setVerticalGroup(
            matrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(matrixPanelLayout.createSequentialGroup()
                .addGroup(matrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkOWButton)
                    .addComponent(owLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(matrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(increaseOWButton)
                    .addComponent(overwatchSpin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(matrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rebootButton)
                    .addComponent(matrixTimerButton)))
        );

        tieButton.setText("Tie Info");
        tieButton.setEnabled(false);
        tieButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tieButtonActionPerformed(evt);
            }
        });

        fileMenu.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Save...");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem1);

        jMenuItem2.setText("Load...");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem2);
        fileMenu.add(jSeparator1);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem3.setText("Exit");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem3);

        jMenuBar1.add(fileMenu);

        aboutMenu.setText("About");

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMenuItem4.setText("Help");
        aboutMenu.add(jMenuItem4);

        jMenuItem5.setText("About");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        aboutMenu.add(jMenuItem5);

        jMenuBar1.add(aboutMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(newPCButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(removeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addOrRemoveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addDiceButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(initPassLabel)
                        .addGap(18, 18, 18)
                        .addComponent(initLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(tieButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(matrixPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(newPlayerPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(changePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(currentPlayerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(initPassLabel)
                            .addComponent(initLabel)
                            .addComponent(nextButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tieButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(currentPlayerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(newPlayerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(matrixPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(changePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newPCButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addOrRemoveButton)
                            .addComponent(addDiceButton))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // When Next button pressed, changes the label to who the next player is.
    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        if (pass == 0)
            pass++;
        this.currentPlayerLabel.setText(nextPlayer());
    }//GEN-LAST:event_nextButtonActionPerformed

    // Adds +1 initiative to the selected player
    private void healButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_healButtonActionPerformed
        Player p1 = getPlayerFromList();
        modifyScore(p1, 1);
        p1.modifyBase(1);
    }//GEN-LAST:event_healButtonActionPerformed

    // Subtracts 1 initiative from the selected player
    private void woundButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_woundButtonActionPerformed
        Player p1 = getPlayerFromList();
        modifyScore(p1, -1);
        p1.modifyBase(-1);
    }//GEN-LAST:event_woundButtonActionPerformed

    // Utilize the "Full Defense" action. Checks that the selected player
    // has 10 initiative left over to utilize.
    private void fullDefenseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullDefenseButtonActionPerformed
        Player p1 = getPlayerFromList();
        if (p1.getTotalInit() < 10)
        {
            javax.swing.JOptionPane.showMessageDialog(null, 
                "Not enough Initiative", "Initiative Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        else
            modifyScore(p1, -10);
    }//GEN-LAST:event_fullDefenseButtonActionPerformed

    // Disable UI elements. Used mainly when there are no selected players.
    private void disableButtons()
    {
        removeButton.setEnabled(false);
        addOrRemoveButton.setEnabled(false);
        addDiceButton.setEnabled(false);
        woundButton.setEnabled(false);
        healButton.setEnabled(false);
        interceptButton.setEnabled(false);
        fullDefenseButton.setEnabled(false);
        dodgeButton.setEnabled(false);
        increaseOWButton.setEnabled(false);
        checkOWButton.setEnabled(false);
        overwatchSpin.setEnabled(false);
        rebootButton.setEnabled(false);
        matrixTimerButton.setEnabled(false);
        owLabel.setVisible(false);
        changePanel.setVisible(false);
    }
    
    // Re-enable UI elements. Usually when a valid player is selected
    private void enableButtons()
    {
        removeButton.setEnabled(true);
        addOrRemoveButton.setEnabled(true);
        addDiceButton.setEnabled(true);
        woundButton.setEnabled(true);
        healButton.setEnabled(true);
        interceptButton.setEnabled(true);
        fullDefenseButton.setEnabled(true);
        dodgeButton.setEnabled(true);
        increaseOWButton.setEnabled(true);
        checkOWButton.setEnabled(true);
        overwatchSpin.setEnabled(true);
        rebootButton.setEnabled(true);
        matrixTimerButton.setEnabled(true);
    }
    
    // Method runs when a new player is selected.
    private void initListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_initListValueChanged
        // If no player selected, disable UI elements.
        if (initList.getSelectedIndex() == -1)
        {
           disableButtons(); 
        }
        else
        {
            enableButtons();
            Player p1 = getPlayerFromList();
            int init = p1.getTotalInit(); // Obtain player's initiative score
            // Disable the intercept and full defense button if player has less than 5 initiative.
            if (init < 5)
            {
                interceptButton.setEnabled(false);
                fullDefenseButton.setEnabled(false);
            }
            // Disable full defense if 5-9 initiative, and enable intercept
            else if (init >= 5 && init < 10)
            {
                fullDefenseButton.setEnabled(false);
                interceptButton.setEnabled(true);
            }
            // If 10 or higher, all actions are available
            else
            {
                fullDefenseButton.setEnabled(true);
                interceptButton.setEnabled(true);
            }
        }
    }//GEN-LAST:event_initListValueChanged

    // When player dodges, subtract 5 from the score
    private void dodgeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dodgeButtonActionPerformed
        Player p1 = getPlayerFromList();
        modifyScore(p1, -5);
    }//GEN-LAST:event_dodgeButtonActionPerformed

    // Used to remove a player from the list
    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        int x = initList.getSelectedIndex();
        removePlayer(x);
        sortPlayers();
    }//GEN-LAST:event_removeButtonActionPerformed

    // Intercept action requires 5 initiative score to use.
    private void interceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_interceptButtonActionPerformed
        Player p1 = getPlayerFromList();
        if (p1.getTotalInit() < 5)
        {
            javax.swing.JOptionPane.showMessageDialog(null, 
                "Not enough Initiative", "Initiative Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        else
            modifyScore(p1, -5);
    }//GEN-LAST:event_interceptButtonActionPerformed

    // When new combatant is added, resets the panel to default
    private void resetPanel()
    {
        npcCheck.setSelected(false);
        nameField.setText("");
        totalInitSpin.setEnabled(true);
        numOfDiceSpin.setEnabled(false);
        baseInitSpin.setEnabled(false);
        baseInitSpin.setValue(1);
        totalInitSpin.setValue(1);
        numOfDiceSpin.setValue(1);
        seizeCheck.setSelected(false);
    }
    
    // When user wants to add a new player, sets the player panel visible
    private void newPCButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPCButtonActionPerformed
        newPlayerPanel.setVisible(true);
        resetPanel();
    }//GEN-LAST:event_newPCButtonActionPerformed
    
    // If user wants to roll dice automatically, sets the UI elements
    // to disable the total initiative and enable the number of dice to roll
    private void npcCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_npcCheckActionPerformed
        if (npcCheck.isSelected())
        {
            totalInitSpin.setEnabled(false);
            baseInitSpin.setEnabled(true);
            numOfDiceSpin.setEnabled(true);
        }
        else
        {
            totalInitSpin.setEnabled(true);
            baseInitSpin.setEnabled(true);
            numOfDiceSpin.setEnabled(false);
        }
    }//GEN-LAST:event_npcCheckActionPerformed

    // Obtain info from the form and create a new player and add to the playerList
    private void addCombatantButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCombatantButtonActionPerformed
        int baseInit;
        int totalInit;
        String name;
        boolean npc;
        int numOfDice = 1;
        boolean seize;
        Player p1;
        
        if (nameField.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Please enter a name.");
        }
        else
        {
            name = nameField.getText();
            npc = npcCheck.isSelected();
            baseInit = (Integer)baseInitSpin.getValue();
            seize = seizeCheck.isSelected();
            // If the roll dice automatically is checked, doll the number of dice
            // and set the initiative as base + total from the dice.
            if (npc)
            {
                numOfDice = (Integer)numOfDiceSpin.getValue();
                totalInit = findInit(baseInit, numOfDice);
            }
            else
            {
                totalInit = (Integer)totalInitSpin.getValue();
            }
            // Rule for adding new combatants is to subtract 10 for each completed
            // combat pass
            if (pass > 1)
                totalInit -= ((pass - 1) * 10);
            if (npc)
                p1 = new Player(name, baseInit, totalInit, numOfDice, seize);
            else
                p1 = new Player(name, totalInit, seize);
            addPlayer(p1);
            sortPlayers();
            newPlayerPanel.setVisible(false);
            nextButton.setEnabled(true);
        }
    }//GEN-LAST:event_addCombatantButtonActionPerformed

    // Show the change score panel
    private void addOrRemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOrRemoveButtonActionPerformed
        changePanel.setVisible(true);
        scoreSpin.setValue(0);
        changeLabel.setText("Score amount to change:");
        changeLabel.setVisible(true);
        scoreSpin.setVisible(true);
        addButton.setVisible(true);
        changeDiceLabel.setVisible(false);
        diceSpin.setVisible(false);
        addDiceBut.setVisible(false);
    }//GEN-LAST:event_addOrRemoveButtonActionPerformed

    // Show the change dice panel. This is used if the +d6 number changes during combat
    private void addDiceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDiceButtonActionPerformed
        changePanel.setVisible(true);
        diceSpin.setValue(0);
        changeLabel.setVisible(false);
        scoreSpin.setVisible(false);
        addButton.setVisible(false);
        changeDiceLabel.setVisible(true);
        diceSpin.setVisible(true);
        addDiceBut.setVisible(true);
        Player p1 = getPlayerFromList();
        if (p1.getNPC())
        {
            changeDiceLabel.setText("Number of dice:");
        }
        else
        {
            changeDiceLabel.setText("Score amount to change:");
        }
    }//GEN-LAST:event_addDiceButtonActionPerformed
    
    // Modify the player's total and base initiative scores
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        Player p1 = getPlayerFromList();
        modifyScore(p1, (Integer)scoreSpin.getValue());
        p1.modifyBase((Integer)scoreSpin.getValue());
        changePanel.setVisible(false);
    }//GEN-LAST:event_addButtonActionPerformed

    // Add or subtract +d6. If an NPC, do automatically. If not an NPC
    // get the number of initiative score to add or subtract from user
    private void addDiceButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDiceButActionPerformed
        Player p1 = getPlayerFromList();
        if (p1.getNPC())
        {
            p1.setTotalInit(findInit(p1.getTotalInit(), (Integer)diceSpin.getValue()));
            p1.modifyNumOfDice((Integer)diceSpin.getValue());
        }
        else
        {
            p1.modifier((Integer)diceSpin.getValue());
        }   
        sortPlayers();
        changePanel.setVisible(false);
    }//GEN-LAST:event_addDiceButActionPerformed

    // "About" window
    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        JOptionPane.showMessageDialog(null, "Roll for Initiative\nv0.1\n\nCreated by Robert Thayer\nCopyright 2014", "About Roll for Initiative", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    // "File" -> "Save..." option
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        String file = getFileLocation();
        if (!file.equals(""))
        {
            if (!file.substring(file.lastIndexOf(".") + 1, file.length()).equalsIgnoreCase("rfi"))
                file += ".rfi";
            save(file);
        }
        else
            JOptionPane.showMessageDialog(null, "Cannot find file", "IO Error", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    // "File" -> "Load" option
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        String file = getFileLocation();
        if (!file.equals(""))
            load(file);
        else
            JOptionPane.showMessageDialog(null, "Cannot find file", "IO Error", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    // "File" -> "Exit" option
    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    // "Reboot Device". Resets player's overwatch score to 0.
    private void rebootButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rebootButtonActionPerformed
        Player p1 = getPlayerFromList();
        p1.setOverwatch(0);
    }//GEN-LAST:event_rebootButtonActionPerformed

    // Displays selected player's overwatch score
    private void checkOWButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkOWButtonActionPerformed
        Player p1 = getPlayerFromList();
        int x = p1.getOverwatch();
        owLabel.setVisible(true);
        owLabel.setText(Integer.toString(x));
    }//GEN-LAST:event_checkOWButtonActionPerformed

    // Increase player's overwatch score by the selected amount
    private void increaseOWButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_increaseOWButtonActionPerformed
        Player p1 = getPlayerFromList();
        int x = (Integer)overwatchSpin.getValue();
        if (x != 0)
        {
            p1.modOverwatch(x);
        }
        // Check if player has reached convergence
        p1.converge();
        overwatchSpin.setValue(0);
        checkOWButtonActionPerformed(evt);
    }//GEN-LAST:event_increaseOWButtonActionPerformed

    // Every 15 minutes after overwatch begins, add +2d6 to the overwatch score. 
    // If the user has not had any overwatch score added,
    // alert user they may have missed a rule.
    private void matrixTimerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matrixTimerButtonActionPerformed
        Player p1 = getPlayerFromList();
        if (p1.getOverwatch() == 0)
        {
            JOptionPane.showMessageDialog(null, "Timer only starts after first "
                    + "illegal action taken.\nIf player has not taken an illegal "
                    + "action, be sure\nto remove the score.", "Rule Alert", 
                    JOptionPane.INFORMATION_MESSAGE);
        } 
        int ow = 0;
        for (int x = 0; x < 2; x++)
        {
            ow += randInt(1,6);
        }
            p1.modOverwatch(ow);
            p1.converge();
    }//GEN-LAST:event_matrixTimerButtonActionPerformed

    private void tieButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tieButtonActionPerformed
        JOptionPane.showMessageDialog(null, "GM can break ties via the ERIC method:\n"
                + "Edge, Reaction, Intuition, Coin flip.\n"
                + "GMs may also have tied players go at the same time.", "How to break ties", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_tieButtonActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu aboutMenu;
    private javax.swing.JButton addButton;
    private javax.swing.JButton addCombatantButton;
    private javax.swing.JButton addDiceBut;
    private javax.swing.JButton addDiceButton;
    private javax.swing.JButton addOrRemoveButton;
    private javax.swing.JLabel baseInitLabel;
    private javax.swing.JSpinner baseInitSpin;
    private javax.swing.JLabel changeDiceLabel;
    private javax.swing.JLabel changeLabel;
    private javax.swing.JPanel changePanel;
    private javax.swing.JButton checkOWButton;
    private javax.swing.JLabel currentPlayerLabel;
    private javax.swing.JLabel d6Label;
    private javax.swing.JSpinner diceSpin;
    private javax.swing.JButton dodgeButton;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton fullDefenseButton;
    private javax.swing.JButton healButton;
    private javax.swing.JButton increaseOWButton;
    private javax.swing.JLabel initLabel;
    private javax.swing.JList initList;
    private javax.swing.JLabel initPassLabel;
    private javax.swing.JButton interceptButton;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPanel matrixPanel;
    private javax.swing.JButton matrixTimerButton;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JButton newPCButton;
    private javax.swing.JPanel newPlayerPanel;
    private javax.swing.JButton nextButton;
    private javax.swing.JCheckBox npcCheck;
    private javax.swing.JLabel npcLabel;
    private javax.swing.JSpinner numOfDiceSpin;
    private javax.swing.JSpinner overwatchSpin;
    private javax.swing.JLabel owLabel;
    private javax.swing.JLabel plusLabel;
    private javax.swing.JButton rebootButton;
    private javax.swing.JButton removeButton;
    private javax.swing.JSpinner scoreSpin;
    private javax.swing.JCheckBox seizeCheck;
    private javax.swing.JLabel seizeLabel;
    private javax.swing.JButton tieButton;
    private javax.swing.JLabel totalInitLabel;
    private javax.swing.JSpinner totalInitSpin;
    private javax.swing.JButton woundButton;
    // End of variables declaration//GEN-END:variables


	private ArrayList<Player> playerList = new ArrayList<>(); // List of Player objects
	int pass = 0; // Determine which initiative pass it is.
        
	// Determine the final initiative score including the base initiative.
	// Obtains how many +d6's and do a random roll.
	public int findInit(int base, int num)
	{
		int baseInit = base;
		int numOfDice = num;
		int diceTotal = 0;
		int initTotal;
				
                // Roll a d6 for each dice and keep the sum total.
		for (int x = Math.abs(numOfDice); x > 0; x--)
		{
                    int randomNum = randInt(1, 6);
                    diceTotal += randomNum;
		}
		
		// Add the dice total to the base initiative score
		if (num > 0)
                    initTotal = baseInit + diceTotal;
                else if (num < 0)
                    initTotal = baseInit - diceTotal;
                else
                    initTotal = baseInit;
		return initTotal;
	}
	
	// Random number generator.
	public int randInt(int min, int max)
	{
		Random rand = new Random();
		int randomNum = rand.nextInt((max - min) + 1) + min;
		
		return randomNum;
	}
        
        // Add a player to the player list
        public void addPlayer(Player p1)
        {
            playerList.add(p1);
        }
        
        // Obtain an element at the selected index
        public Player getPlayer(int x)
        {
            Player p1 = playerList.get(x);
            return p1;
        }
        
        // Remove player at index
        public void removePlayer(int x)
        {
            playerList.remove(x);
        }
        
        // Sort the list, then check list for null objects and remove from list.
        public void removeNull()
        {
            Collections.sort(playerList, Player.Comparators.TOTAL);
            for (int i = 0; i < playerList.size(); i++)
            {
                if (playerList.get(i) == null)
                    removePlayer(i);
            }
        }
	
	// Sort the list based on Total Initiative with Base Initiative breaking ties.
	public void sortPlayers()
	{
		removeNull();
                if (pass > 0)
                {
                    nextButton.setEnabled(true);
                    initPassLabel.setText("Initiative pass: " + pass);
                }
                String[] list = new String[playerList.size()];
                for (int i = 0; i < list.length; i++)
                {
                        list[i] = playerList.get(i).toString();
                }
                // Set the JList object as the sorted list
                setInitList(initList, list);
	}
	
	// Remove 10 score from every player and reset the ActionTaken variable
	public void nextPass()
	{
            for(Player c: playerList)
            {
                c.setTotalInit(c.getTotalInit() - 10);
                c.setActionTaken(false);
            }
            pass++;
		
            // If the Combat Turn is not over, print out which pass it is
            if (!roundDone())
                setInitPassLabel("Initiative pass: " + pass);
	}
	
	// Determine if all players have used their initiative
	public boolean roundDone()
	{
		boolean roundDone = false;
		int x = 0;
		
		// Check scores of all players and increment counted if anyone is over 1
		for(Player c: playerList)
		{
			if (c.getTotalInit() > 0)
				x++;
                        roundDone = (x == 0);
		}
		
		return roundDone;
	}
	
	// Method to cycle through the players 1 at a time.
	public String nextPlayer()
	{
            if (nextButton.getText().equals("Next Round"))
            {
                nextButton.setText("Next");
                nextRound();
            }
            tieButton.setEnabled(false);
            String returnString = "";
            Player p1 = null;
            sortPlayers();
            for(Player s: playerList)
            {
                if(!s.getActionTaken() && s.getTotalInit() > 0)
                {
                    // Check for ties by comparing to previous element
                    if (p1 != null)
                    {
                        // If the previous player has Seized the Initiative
                        // and current player has not, even if tied, display
                        // only previous player.
                        if (!s.isTied(p1) || (p1.getSeize() && !s.getSeize()))
                        {
                            break;
                        }
                        else
                        {
                            returnString += " & " + s.toString();
                            s.setActionTaken(true);
                            tieButton.setEnabled(true);
                            p1 = s;
                        }
                    }
                    else
                    {
                        returnString += s.toString();
                        s.setActionTaken(true);
                        setInitLabel("Initiative: " + s.getTotalInit());
                        p1 = s;
                    }
                }
            }
            
            // If all players have been gone through and none have actions
            // go to next pass.
            if (returnString.equals(""))
            {
                nextPass();
                if (roundDone())
                {
                    returnString = "Combat Round Complete!";
                    nextButton.setText("Next Round");
                }
                else
                {
                    returnString = "New Initiative Pass!";
                }
                setInitLabel("Initiative:");
            }
            return returnString;
	}
        
        // When all initiative passes are complete, begin the next round.
        // This method will reset everyone's actionTaken and Seize the Initiative
        // to false. It will roll dice for initiative for all players who are 
        // auto rolling. It will then prompt user for the initiative scores for
        // all other players. Finally, it will prompt user to see if any players
        // are using Seize the Initiative this turn.
        
        public void nextRound()
        {
            pass = 1;
            initPassLabel.setText("Initiative Pass: 1");
            for (Player s: playerList)
            {
                int score;
                s.setActionTaken(false);
                s.setSeize(false);
                if (s.getNPC())
                    s.setTotalInit(findInit(s.getBaseInit(), s.getNumOfDice()));
                else
                {
                    do
                    {
                        String inputValue = JOptionPane.showInputDialog("What is " + s.getName() + 
                            "'s total initiative score this round?");
                        try
                        {
                            score = java.lang.Integer.parseInt(inputValue);
                        }
                        catch(NumberFormatException e)
                        {
                            JOptionPane.showMessageDialog
                            (null, "Please enter a valid score.", "Error", JOptionPane.ERROR_MESSAGE);
                            score = -1;
                        }
                    } while (score < 1);  
                    s.setTotalInit(score);
                }
            }
            checkSeize();
        }
        
        // Prompt first to determine if any players will be using Seize the Initiative.
        // If yes, then list out the players and select all of them that are
        // using Seize.
        public void checkSeize()
        {
            int check = JOptionPane.showConfirmDialog(null, "Are any players using Seize the Initiative?", "Seize the Initiative", JOptionPane.YES_NO_OPTION);
            if (check == JOptionPane.YES_OPTION)
            {
                JList seizeList = new JList();
                removeNull();
                String[] list = new String[playerList.size()];
                for (int i = 0; i < list.length; i++)
                {
                        list[i] = playerList.get(i).getName();
                }
                setInitList(seizeList, list);
                
                JPanel myPanel = new JPanel();
                myPanel.add(new JLabel("Select player(s) who are Seizing the Initiative"));
                myPanel.add(Box.createHorizontalStrut(15));
                myPanel.add(seizeList);
                int result = JOptionPane.showConfirmDialog(null, myPanel, "Please choose players", JOptionPane.OK_CANCEL_OPTION);
                if (result == JOptionPane.OK_OPTION)
                {
                    // Take the players selected and set Seize as true for each.
                    int[] selection = seizeList.getSelectedIndices();
                    if (selection.length > 0)
                    {
                        for (int i = 0; i < selection.length; i++)
                        {
                        int x = selection[i];
                        Player p1 = playerList.get(x);
                        p1.setSeize(true);
                        }
                    }
                }
            }
        }
        
        // For selected player, change the score by integer x
	public void modifyScore(Player o, int x)
	{
		o.modifier(x);
                sortPlayers();
	}
        
        // Method to save the state of the game
        public void save(String fileName)
        {

            File file = new File(fileName);
            try (FileOutputStream fos = new FileOutputStream(fileName)) 
            {
                if (!file.exists())
                    file.createNewFile();
                try (ObjectOutputStream oos = new ObjectOutputStream(fos)) 
                {
                    oos.writeObject(playerList);
                    oos.writeInt(pass);
                    oos.close();
                }
            }
            
            catch (IOException e)
            {
                JOptionPane.showMessageDialog(null, "Cannot save file", "IO Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        
        // Method to load the state of the game
        public void load(String fileName)
        {
            try
            {
                FileInputStream fis = new FileInputStream(fileName);
                try (ObjectInputStream ois = new ObjectInputStream(fis)) {
                    playerList = (ArrayList<Player>) ois.readObject();
                    pass = ois.readInt();
                    ois.close();
                    sortPlayers();
                }
                
            }
            catch (IOException | ClassNotFoundException e)
            {
                JOptionPane.showMessageDialog(null, "Cannot load file", "IO Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        
        // Method to choose file location.
        public String getFileLocation()
        {
            JFileChooser chooser = new JFileChooser();
            FileNameExtensionFilter filter = new FileNameExtensionFilter(
                    "Roll For Initiative Files (*.rfi)", "rfi");
            chooser.setFileFilter(filter);
            int returnVal = chooser.showOpenDialog(this);
            if(returnVal == JFileChooser.APPROVE_OPTION)
                return chooser.getSelectedFile().getAbsolutePath();
            else
                return "";
        }
}